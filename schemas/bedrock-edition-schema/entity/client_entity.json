{
    "id": "https://legopitstop.github.io/JSON-Schemas/schemas/bedrock-edition-schema/entity/entity.json",
    "$schema": "http://json-schema.org/draft-07/schema",
    "description": "JSON schema for data-driven entities",
    "type": "object",
    "default": {},
    "properties": {
        "description": {
            "properties": {
                "identifier": {
                    "$ref": "https://legopitstop.github.io/JSON-Schemas/schemas/bedrock-edition-schema/common.json#/definitions/nameSpaceID",
                    "title": "identifier",
                    "description": "The identifier is used to register the entity with the server. In the Client Entity Definitions JSON the identifier sets the appearance of the entity(materials, textures, geometry, etc.) The matching identifier in the Entity Behavior JSON in the Behavior Pack is what gives the entity its behaviors."
                },
                "min_engine_version": {
                    "$ref": "https://legopitstop.github.io/JSON-Schemas/schemas/bedrock-edition-schema/common.json#/definitions/supportedVersions",
                    "title": "min_engine_version",
                    "description": "When present, players can set the min version needed to allow the JSON to be parsed. The version in the definition is compared to the engine version for which the top resource pack was built.If a definition's min_engine_version is newer than that pack's engine version then the definition is not parsed.Multiple definition files may use the same identifier, in which case only one of those definitions will be loaded. The definition with the same or closest and not greater min_engine_version, as compared to the top resource pack's engine version, will be parsed; all other definitions with the same identifier will not be parsed.This can be useful for continuing to support an older version of an entity, when an older resource pack is used at the top of the resource pack stack, while also supporting a newer version of the entity in all other cases."
                },
                "materials": {
                    "type": "object",
                    "title": "materials",
                    "description": "Players can set the materials, texture and geometry used for the entity in this section. Players can set one or more materials, textures, and geometries that can be used by the mob. Players must set user defined names for them. These names are used in the Render Controllers JSON. Players can reference materials, textures, and geometry from the vanilla Minecraft Resource Pack or create their own. Custom materials, textures, and geometry should be in the corresponding folder at the root of the Resource Pack.",
                    "properties": {
                        "default": {
                            "type": "string"
                        }
                    }
                },
                "textures": {
                    "type": "object",
                    "title": "textures",
                    "description": "Players can set the materials, texture and geometry used for the entity in this section. Players can set one or more materials, textures, and geometries that can be used by the mob. Players must set user defined names for them. These names are used in the Render Controllers JSON. Players can reference materials, textures, and geometry from the vanilla Minecraft Resource Pack or create their own. Custom materials, textures, and geometry should be in the corresponding folder at the root of the Resource Pack.",
                    "properties": {
                        "default": {
                            "type": "string"
                        }
                    }
                },
                "geometry": {
                    "type": "object",
                    "title": "geometry",
                    "description": "Players can set the materials, texture and geometry used for the entity in this section. Players can set one or more materials, textures, and geometries that can be used by the mob. Players must set user defined names for them. These names are used in the Render Controllers JSON. Players can reference materials, textures, and geometry from the vanilla Minecraft Resource Pack or create their own. Custom materials, textures, and geometry should be in the corresponding folder at the root of the Resource Pack.",
                    "properties": {
                        "default": {
                            "type": "string"
                        }
                    }
                },
                "scripts": {
                    "type": "object",
                    "title": "scripts",
                    "description": "Scripts allow players to use MoLang to compute calculations once and store that value. This value than can be used over and over again without the need to constantly recompute the calculations. Scripts currently support pre - animation and scale.More script types will be added later.Pre-animation scripts are evaluated immediately before animations are processed.-Scale sets the scale of the mob's geometry.",
                    "properties": {
                        "pre_animation": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "scale": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "animations": {
                    "type": "object",
                    "title": "animations",
                    "description": "Allows the player to assign names to reference the long name for animations. These names are used by the animation controller JSON. Players can reference animations from the vanilla Minecraft Resource Pack or create their own. Custom animations should be in the animation folder at the root of the Resource Pack."
                },
                "animation_controllers": {
                    "type": "array",
                    "title": "animation_controllers",
                    "description": "Animation controllers decide which animations to play when. Each Controller contains a list of states that play one or more animations. Allows the player to assign names to reference the long names for animation controllers. Names are required and need to be unique from all other names in the animation controllers for that mob. Players can reference animation controllers from the vanilla Minecraft Resource Pack or create their own. Custom animation controllers should be in the animation_controllers folder at the root of the Resource Pack.",
                    "items": {
                        "type": "object"
                    }
                },
                "render_controllers": {
                    "type": "array",
                    "title": "render_controllers",
                    "description": "Specifies the names of render controllers. This name needs to match the name of a corresponding JSON located in the Render Controllers folder. Players can reference Render Controllers from the vanilla Minecraft Resource Pack or create their own. Custom Render Controllers should be in the textures folder at the root of the Resource Pack.",
                    "items": {
                        "type": "string"
                    }
                },
                "enable_attachables": {
                    "type": "boolean",
                    "title": "enable_attachables",
                    "description": "This determines if the entity can equip attachables when this is set to true. This allows the entity to render armor."
                },
                "particle": {
                    "type": "string",
                    "title": "particle",
                    "description": "Allows the player to assign a key to reference the long name for particles. When these are present, the particle is created when the entity is spawned. Keys are required and need to be unique from all other keys in the animation controllers. Players can reference particles from the vanilla Minecraft Resource Pack or create their own. Custom particles should be in the particle folder at the root of the Resource Pack."
                },
                "locators": {
                    "type": "object",
                    "title": "locators",
                    "description": "Locator offsets are specified in model space. An example of a locator is the \"lead\" locator used to specify where the lead will attach to graphically.",
                    "items": {
                        "type": "object"
                    }
                },
                "spawn_egg": {
                    "type": "object",
                    "title": "spawn_egg",
                    "description": "This sets the color or texture used for the entity Spawn Egg. There are 2 ways to do this. The first is to use the hex value for the base color and the overlay color.",
                    "properties": {
                        "texture": {
                            "type": "string"
                        },
                        "texture_index": {
                            "type": "number"
                        },
                        "base_color": {
                            "$ref": "https://legopitstop.github.io/JSON-Schemas/schemas/common_regex.json#/definitions/hex_color"
                        },
                        "overlay_color": {
                            "$ref": "https://legopitstop.github.io/JSON-Schemas/schemas/common_regex.json#/definitions/hex_color"
                        }
                    }
                }
            }
        }
    }
}