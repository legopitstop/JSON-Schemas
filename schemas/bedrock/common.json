{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Vector3": {
      "type": "array",
      "default": [0.0, 0.0, 0.0],
      "items": {
        "type": "number"
      },
      "minItems": 3,
      "maxItems": 3
    },
    "UnlockRecipe": {
      "$id": "../common.json#/definitions/UnlockRecipe",
      "description": "Unlock this recipe",
      "type": ["object", "array"],
      "default": {},
      "properties": {
        "context": {
          "description": "Context to unlock the recipe.",
          "type": "string",
          "examples": [
            "PlayerInWater",
            "PlayerHasManyItems",
            "AlwaysUnlocked",
            "None"
          ]
        },
        "item": {
          "description": "The item needed to unlock the recipe.",
          "type": "string",
          "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/item"
        },
        "data": {
          "description": "The items data. (if any)",
          "type": "integer",
          "default": 0
        },
        "tag": {
          "description": "The item tag to use",
          "type": "string",
          "examples": [
            "minecraft:soul_fire_base_blocks",
            "minecraft:stone_tool_materials",
            "minecraft:stone_crafting_materials",
            "minecraft:planks",
            "minecraft:wooden_slabs"
          ]
        }
      },
      "additionalProperties": false,
      "items": {
        "type": "object",
        "default": {},
        "properties": {
          "context": {
            "description": "Context to unlock the recipe.",
            "type": "string",
            "examples": [
              "PlayerInWater",
              "PlayerHasManyItems",
              "AlwaysUnlocked",
              "None"
            ]
          },
          "item": {
            "description": "The item needed to unlock the recipe.",
            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/item"
          },
          "data": {
            "description": "The items data. (if any)",
            "type": "integer",
            "default": 0
          },
          "tag": {
            "description": "The item tag to use",
            "type": "string",
            "examples": [
              "minecraft:soul_fire_base_blocks",
              "minecraft:stone_tool_materials",
              "minecraft:stone_crafting_materials",
              "minecraft:planks",
              "minecraft:wooden_slabs"
            ]
          }
        }
      }
    },
    "supportedVersions": {
      "$id": "../common.json#/definitions/supportedVersions",
      "type": ["string", "number"],
      "examples": ["1.10", "1.12", "1.13", "1.16", "1.18", "1.19.80", 1, 2]
    },
    "blockshape": {
      "$id": "../common.json#/definitions/blockshape",
      "type": "string",
      "examples": [
        "invisible",
        "block",
        "cross_texture",
        "torch",
        "fire",
        "water",
        "red_dust",
        "rows",
        "door",
        "ladder",
        "rail",
        "stairs",
        "fence",
        "lever",
        "cactus",
        "bed",
        "diode",
        "iron_fence",
        "stem",
        "vine",
        "fence_gate",
        "chest",
        "lilypad",
        "brewing_stand",
        "portal_frame",
        "cocoa",
        "tree",
        "cobblestone_wall",
        "double_plant",
        "flower_pot",
        "anvil",
        "dragon_egg",
        "structure_void",
        "block_half",
        "top_snow",
        "tripwire",
        "tripwire_hook",
        "cauldron",
        "repeater",
        "comparator",
        "hopper",
        "slime_block",
        "piston",
        "beacon",
        "chorus_plant",
        "chorus_flower",
        "end_portal",
        "end_rod",
        "skull",
        "facing_block",
        "command_block",
        "terracotta",
        "double_side_fence",
        "frame",
        "shulker_box",
        "doublesided_cross_texture",
        "doublesided_double_plant",
        "doublesided_rows",
        "element_block",
        "chemistry_table",
        "coral_fan",
        "seagrass",
        "kelp",
        "trapdoor",
        "sea_pickle",
        "conduit",
        "turtle_egg",
        "bubble_column",
        "barrier",
        "sign",
        "bamboo",
        "bamboo_sapling",
        "scaffolding",
        "grindstone",
        "bell",
        "lantern",
        "campfire",
        "lectern",
        "sweet_berry_bush",
        "cartography_table",
        "stonecutter_block",
        "chain",
        "sculk_sensor",
        "azalea",
        "flowering_azalea",
        "glow_frame",
        "glow_lichen"
      ]
    },
    "sounds": {
      "$id": "../common.json#/definitions/sounds",
      "type": "string",
      "examples": [
        "amethyst_block",
        "amethyst_cluster",
        "ancient_debris",
        "anvil",
        "azalea",
        "azalea_leaves",
        "bamboo",
        "bamboo_sapling",
        "basalt",
        "big_dripleaf",
        "bone_block",
        "calcite",
        "candle",
        "cave_vines",
        "chain",
        "cloth",
        "comparator",
        "copper",
        "coral",
        "deepslate",
        "deepslate_bricks",
        "dirt_with_roots",
        "dripstone_block",
        "frog_spawn",
        "froglight",
        "fungus",
        "glass",
        "grass",
        "gravel",
        "hanging_roots",
        "honey_block",
        "itemframe",
        "ladder",
        "lantern",
        "large_amethyst_bud",
        "lodestone",
        "mangrove_roots",
        "medium_amethyst_bud",
        "metal",
        "moss_block",
        "moss_carpet",
        "mud",
        "mud_bricks",
        "muddy_mangrove_roots",
        "nether_brick",
        "nether_gold_ore",
        "nether_sprouts",
        "nether_wart",
        "netherite",
        "netherrack",
        "nylium",
        "packed_mud",
        "pointed_dripstone",
        "powder_snow",
        "roots",
        "sand",
        "scaffolding",
        "sculk",
        "sculk_catalyst",
        "sculk_sensor",
        "sculk_shrieker",
        "sculk_vein",
        "shroomlight",
        "slime",
        "small_amethyst_bud",
        "snow",
        "soul_sand",
        "soul_soil",
        "spore_blossom",
        "stem",
        "stone",
        "sweet_berry_bush",
        "tuff",
        "vines",
        "wood"
      ]
    },

    "Decimal": {
      "$id": "../common.json#/definitions/Decimal",
      "type": "number",
      "minimum": 0.0,
      "maximum": 1.0
    },
    "itemCount": {
      "$id": "../common.json#/definitions/itemCount",
      "type": "number",
      "minimum": 0,
      "maximum": 64
    },
    "saturationModifier": {
      "$id": "../common.json#/definitions/saturationModifier",
      "anyOf": [
        {
          "$ref": "./enum.json#/definitions/saturationModifier"
        },
        {
          "type": "number",
          "minimum": 0.0,
          "default": 0.6
        }
      ]
    },
    "recipeTags": {
      "$id": "../common.json#/definitions/recipeTags",
      "type": "string",
      "examples": [
        "furnace",
        "smoker",
        "campfire",
        "soul_campfire",
        "crafting_table",
        "brewing_stand",
        "stonecutter",
        "smithing_table"
      ],
      "maxLength": 64
    },
    "itemDataCount": {
      "$id": "../common.json#/definitions/itemDataCount",
      "anyOf": [
        {
          "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/item"
        },
        {
          "type": "object",
          "anyOf": [
            {
              "required": ["item"]
            },
            {
              "required": ["tag"]
            }
          ],
          "properties": {
            "item": {
              "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/item",
              "description": "The items id"
            },
            "data": {
              "type": "number",
              "description": "The items data. (if any)"
            },
            "tag": {
              "description": "The item tag to use",
              "type": "string"
            },
            "count": {
              "type": "number",
              "default": 1,
              "maximum": 64,
              "minimum": 1,
              "description": "Number of these items"
            }
          }
        }
      ]
    },
    "itemData": {
      "$id": "../common.json#/definitions/itemData",
      "anyOf": [
        {
          "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/item"
        },
        {
          "type": "object",
          "anyOf": [
            {
              "required": ["item"]
            },
            {
              "required": ["tag"]
            }
          ],
          "properties": {
            "item": {
              "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/item",
              "description": "The items id"
            },
            "tag": {
              "description": "The item tag to use"
            },
            "data": {
              "description": "The items data. (if any)",
              "type": "number"
            }
          }
        }
      ]
    },
    "nameSpaceID": {
      "$id": "../common.json#/definitions/nameSpaceID",
      "type": "string",
      "pattern": "^(?:[a-zA-Z0-9._]*.:)?.[a-zA-Z0-9._]*(?::[0-9]{1,})?$",
      "description": "Namespace id. must not contain Minecraft namespace. example; custom:stone"
    },
    "floatMolang": {
      "$id": "../common.json#/definitions/floatMolang",
      "anyOf": [
        {
          "type": "number"
        },
        {
          "type": "string",
          "$ref": "#/definitions/MoLang"
        }
      ]
    },
    "MoLang": {
      "$id": "../common.json#/definitions/MoLang",
      "type": ["string", "number", "boolean"],
      "description": "Molang can be quite complex, or simple. It depends on your needs. More Info: https://bedrock.dev/docs/stable/MoLang",
      "examples": [
        "q.block_neighbor_has_any_tag(X,Y,Z,'TAG')",
        "q.block_state('MOD_ID:PROPERTY') == 'VALUE'",
        "q.block_state('MOD_ID:PROPERTY') ? 'true' : 'false'",
        "q.has_block_state('MOD_ID:PROPERTY')",
        "q.is_item_name_any('slot.weapon.mainhand','ITEM')",
        "q.max_damage * 0.25",
        "q.any_tag('TAG')",
        "Geometry.geometry_name",
        "Texture.texture_name",
        "Materal.materal_name"
      ]
    },
    "EventTrigger": {
      "$id": "../common.json#/definitions/EventTrigger",
      "type": "object",
      "default": {},
      "required": ["event"],
      "properties": {
        "condition": {
          "description": "Molang to match to run the event",
          "$ref": "#/definitions/MoLang"
        },
        "event": {
          "description": "The event to trigger.",
          "type": "string"
        },
        "target": {
          "description": "The target to execute agenst.",
          "$ref": "./enum.json#/definitions/eventTarget",
          "default": "self"
        }
      }
    },
    "schemaArray": {
      "$id": "../common.json#/definitions/schemaArray",
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/block.json#/properties/components"
      }
    },
    "Events": {
      "$id": "../common.json#/definitions/Events",
      "type": "object",
      "description": "This is the name of the event.",
      "properties": {
        "add_mob_effect": {
          "description": "Apply mob effect to target.",
          "type": "object",
          "required": ["amplifier", "duration", "effect"],
          "default": {
            "amplifier": 0,
            "duration": 0,
            "effect": "",
            "target": "self"
          },
          "properties": {
            "amplifier": {
              "type": "integer",
              "default": 0,
              "description": "The amplifier for the mob effect."
            },
            "duration": {
              "type": "integer",
              "default": 0.0,
              "description": "The duration of the mob effect. (In seconds)"
            },
            "effect": {
              "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/item",
              "description": "The mob effect to apply."
            },
            "target": {
              "$ref": "./enum.json#/definitions/eventTarget",
              "default": "self",
              "description": "The target context to execute against."
            }
          }
        },
        "damage": {
          "description": "Deals damage to the target.",
          "type": "object",
          "required": ["amount", "type"],
          "default": {
            "amount": 0,
            "type": "none",
            "target": "self"
          },
          "properties": {
            "amount": {
              "type": "integer",
              "default": 0,
              "description": "The amount of damage to deal."
            },
            "type": {
              "$ref": "./enum.json#/definitions/damageSource",
              "description": "The type of damage to deal."
            },
            "target": {
              "$ref": "./enum.json#/definitions/eventTarget",
              "default": "self",
              "description": "The target context to execute against."
            }
          }
        },
        "decrement_stack": {
          "description": "Decrement item stack.",
          "type": "object",
          "properties": {
            "ignore_game_mode": {
              "type": "boolean",
              "default": false,
              "description": "set to false by default. If false it will no longer decrease the item stack when playing in Creative by default."
            }
          }
        },
        "die": {
          "description": "Kill target. If target is self and this is run from a block then destroy the block.",
          "type": "object",
          "required": ["target"],
          "default": {
            "target": "self"
          },
          "properties": {
            "target": {
              "$ref": "./enum.json#/definitions/eventTarget",
              "default": "self",
              "description": "The target context to execute against."
            }
          }
        },
        "play_effect": {
          "description": "Spawns a particle effect relative to target position.",
          "type": "object",
          "required": ["data", "effect"],
          "default": {
            "data": 0,
            "effect": "",
            "target": "self"
          },
          "properties": {
            "data": {
              "type": "integer",
              "default": 0,
              "description": "Particle data value."
            },
            "effect": {
              "type": "string",
              "description": "The name of the particle effect to create."
            },
            "target": {
              "$ref": "./enum.json#/definitions/eventTarget",
              "default": "self",
              "description": "The target context to execute against."
            }
          }
        },
        "play_sound": {
          "description": "Play a sound relative to target position.",
          "type": "object",
          "required": ["sound"],
          "default": {
            "sound": "",
            "target": "self"
          },
          "properties": {
            "sound": {
              "type": "string",
              "description": "The name of the sound to play."
            },
            "target": {
              "$ref": "./enum.json#/definitions/eventTarget",
              "default": "self",
              "description": "The target context to execute against."
            }
          }
        },
        "remove_mob_effect": {
          "description": "Removes mob effect from target.",
          "type": "object",
          "required": ["effect"],
          "default": {
            "effect": "",
            "target": "self"
          },
          "properties": {
            "effect": {
              "description": "The mob effect to remove. Use 'all' to remove all mob effects from target.",
              "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/effect"
            },
            "target": {
              "$ref": "./enum.json#/definitions/eventTarget",
              "default": "self",
              "description": "The target context to execute against."
            }
          }
        },
        "run_command": {
          "description": "Triggers a slash command or a list of slash commands.",
          "type": "object",
          "required": ["command"],
          "uniqueItems": true,
          "properties": {
            "command": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ],
              "default": "",
              "description": "List of slash commands to run."
            },
            "target": {
              "$ref": "./enum.json#/definitions/eventTarget",
              "default": "self",
              "description": "The target context to execute against."
            }
          }
        },
        "set_block": {
          "description": "Sets this block to another block type.",
          "type": "object",
          "required": ["block_type"],
          "default": {
            "block_type": ""
          },
          "properties": {
            "block_type": {
              "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/block",
              "description": "The type of block to set."
            }
          }
        },
        "set_block_at_pos": {
          "description": "Sets a block relative to this block to another block type.",
          "type": "object",
          "required": ["block_type", "block_offset"],
          "default": {
            "block_type": "",
            "block_offset": [0.0, 0.0, 0.0]
          },
          "properties": {
            "block_type": {
              "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/block",
              "description": "The type of block to set."
            },
            "block_offset": {
              "type": "array",
              "default": [0.0, 0.0, 0.0],
              "description": "The offset from the block's center."
            }
          }
        },
        "set_block_property": {
          "description": "(Blocks Only) Sets a block property on this block.",
          "type": "object",
          "default": {
            "mod_id:property": ""
          },
          "additionalProperties": {
            "type": ["string", "integer", "boolean"],
            "description": "Block property to set on the block. Can use MoLang.",
            "examples": [
              "q.cardinal_facing",
              "q.cardinal_facing_2d",
              "q.cardinal_player_facing",
              "q.cardinal_block_face_placed_on",
              "PROPERTY"
            ]
          }
        },
        "spawn_loot": {
          "description": "Spawn loot from block.",
          "type": "object",
          "required": ["table"],
          "default": {
            "table": ""
          },
          "properties": {
            "table": {
              "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/file_path_json",
              "description": "File path, relative to the Behavior Pack's path, to the loot table file."
            }
          }
        },
        "swing": {
          "description": "Event causes the actor to swing.",
          "type": "object"
        },
        "teleport": {
          "description": "Teleport target randomly around destination point.",
          "type": "object",
          "default": {
            "avoid_water": true,
            "destination": [0.0, 0.0, 0.0],
            "land_on_block": true,
            "max_range": [8.0, 8.0, 8.0],
            "target": "self"
          },
          "properties": {
            "avoid_water": {
              "type": "boolean",
              "default": true,
              "description": "Determines if the teleport avoids putting the target in water."
            },
            "destination": {
              "type": "array",
              "default": [0.0, 0.0, 0.0],
              "description": "Origin destination of the teleport."
            },
            "land_on_block": {
              "type": "boolean",
              "default": true,
              "description": "Determines if the teleport places the target on a block."
            },
            "max_range": {
              "type": "array",
              "default": [8.0, 8.0, 8.0],
              "description": "Max range the target can teleport relative to the origin destination."
            },
            "target": {
              "$ref": "./enum.json#/definitions/eventTarget",
              "default": "self",
              "description": "The target context to execute against."
            }
          }
        },
        "transform_item": {
          "description": "Transforms item into another item.",
          "type": "object",
          "required": ["transform"],
          "default": {
            "transform": ""
          },
          "properties": {
            "transform": {
              "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/item",
              "description": "Name of the item it should transform into"
            }
          }
        },
        "shoot": {
          "description": "Shoots a projectile.",
          "properties": {
            "projectile": {
              "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/entity"
            },
            "launch_power": {
              "type": "number"
            },
            "angle_offset": {
              "type": "number"
            }
          }
        },
        "condition": {
          "description": "The condition of event to be executed on the block. (Only applyable to 'sequence' event)",
          "$ref": "#/definitions/MoLang"
        },
        "weight": {
          "description": "The weight of event to be executed on the block. (Only applyable to 'randomize' event)",
          "type": "integer"
        },
        "sequence": {
          "description": "Used to sequence event functions.",
          "type": "array",
          "default": [{}],
          "items": {
            "$ref": "#/definitions/Events"
          }
        },
        "randomize": {
          "description": "Used to randomize event functions",
          "type": "array",
          "default": [{}],
          "items": {
            "$ref": "#/definitions/Events"
          }
        },
        "trigger": {
          "description": "Run another event.",
          "type": "object",
          "required": ["event"],
          "properties": {
            "condition": {
              "$ref": "#/definitions/MoLang",
              "description": "The condition of event to be executed on the block."
            },
            "event": {
              "type": "string",
              "description": "The type of event executed on the block."
            },
            "target": {
              "$ref": "./enum.json#/definitions/eventTarget",
              "default": "self",
              "description": "The target of event executed on the block."
            }
          }
        }
      }
    },
    "_filter": {
      "description": "Filter",
      "type": ["object", "array"],
      "default": {},
      "items": {
        "$ref": "#/definitions/_filter"
      },
      "properties": {
        "all_of": {
          "description": "All tests must pass in order for the group to pass.",
          "$ref": "#/definitions/_filter"
        },
        "any_of": {
          "description": "One or more tests must pass in order for the group to pass.",
          "$ref": "#/definitions/_filter"
        },
        "none_of": {
          "description": "All tests must fail in order for the group to pass.",
          "$ref": "#/definitions/_filter"
        },
        "test": {
          "$ref": "./enum.json#/definitions/filterTest"
        },
        "name": {
          "type": "string"
        },
        "domain": {
          "description": "The equipment location to test",
          "type": "string",
          "examples": [
            "any",
            "armor",
            "feet",
            "hand",
            "head",
            "inventory",
            "leg",
            "torso"
          ]
        },
        "operator": {
          "description": "The comparison to apply with 'value'.",
          "$ref": "./enum.json#/definitions/operator"
        },
        "subject": {
          "description": "The subject of this filter test.",
          "$ref": "./enum.json#/definitions/filterSubject"
        },
        "value": {
          "type": ["string", "boolean", "number"]
        },
        "other_with_families": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Filters": {
      "$id": "../common.json#/definitions/Filters",
      "description": "Filters allow data objects to specify test criteria which allows their use.",
      "type": ["array", "object"],
      "default": {},
      "items": {
        "$ref": "#/definitions/_filter"
      },
      "properties": {
        "all_of": {
          "description": "All tests must pass in order for the group to pass.",
          "$ref": "#/definitions/_filter"
        },
        "any_of": {
          "description": "One or more tests must pass in order for the group to pass.",
          "$ref": "#/definitions/_filter"
        },
        "none_of": {
          "description": "All tests must fail in order for the group to pass.",
          "$ref": "#/definitions/_filter"
        },
        "test": {
          "$ref": "#/definitions/_filter/properties/test"
        },
        "other_with_families": {
          "$ref": "#/definitions/_filter/properties/other_with_families"
        },
        "name": {
          "$ref": "#/definitions/_filter/properties/name"
        },
        "domain": {
          "$ref": "#/definitions/_filter/properties/domain"
        },
        "operator": {
          "$ref": "#/definitions/_filter/properties/operator"
        },
        "subject": {
          "$ref": "#/definitions/_filter/properties/subject"
        },
        "value": {
          "$ref": "#/definitions/_filter/properties/value"
        }
      },
      "additionalProperties": false
    },
    "blockstate": {
      "default": "",
      "anyOf": [
        {
          "type": "string",
          "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/block"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "description": "ID of the block",
              "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/vanilla_bedrock.json#/definitions/block"
            },
            "states": {
              "description": "Key-value pair of this block states.",
              "type": "object",
              "default": {},
              "additionalProperties": {
                "type": ["string", "number", "boolean"]
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
