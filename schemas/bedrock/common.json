{
    "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "supportedVersions": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/supportedVersions",
            "type": [
                "string",
                "number"
            ],
            "examples": [
                "1.10",
                "1.12",
                "1.13",
                "1.13.0",
                "1.13.1",
                "1.13.2",
                "1.16",
                "1.16.0",
                "1.16.1",
                "1.16.100",
                "1.16.2",
                "1.16.200",
                "1.16.210.56",
                "1.16.210.58",
                "1.18",
                1,
                2
            ]
        },
        "blockshape": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/blockshape",
            "type": "string",
            "examples": [
                "invisible",
                "block",
                "cross_texture",
                "torch",
                "fire",
                "water",
                "red_dust",
                "rows",
                "door",
                "ladder",
                "rail",
                "stairs",
                "fence",
                "lever",
                "cactus",
                "bed",
                "diode",
                "iron_fence",
                "stem",
                "vine",
                "fence_gate",
                "chest",
                "lilypad",
                "brewing_stand",
                "portal_frame",
                "cocoa",
                "tree",
                "cobblestone_wall",
                "double_plant",
                "flower_pot",
                "anvil",
                "dragon_egg",
                "structure_void",
                "block_half",
                "top_snow",
                "tripwire",
                "tripwire_hook",
                "cauldron",
                "repeater",
                "comparator",
                "hopper",
                "slime_block",
                "piston",
                "beacon",
                "chorus_plant",
                "chorus_flower",
                "end_portal",
                "end_rod",
                "skull",
                "facing_block",
                "command_block",
                "terracotta",
                "double_side_fence",
                "frame",
                "shulker_box",
                "doublesided_cross_texture",
                "doublesided_double_plant",
                "doublesided_rows",
                "element_block",
                "chemistry_table",
                "coral_fan",
                "seagrass",
                "kelp",
                "trapdoor",
                "sea_pickle",
                "conduit",
                "turtle_egg",
                "bubble_column",
                "barrier",
                "sign",
                "bamboo",
                "bamboo_sapling",
                "scaffolding",
                "grindstone",
                "bell",
                "lantern",
                "campfire",
                "lectern",
                "sweet_berry_bush",
                "cartography_table",
                "stonecutter_block",
                "chain",
                "sculk_sensor",
                "azalea",
                "flowering_azalea",
                "glow_frame",
                "glow_lichen"
            ]
        },
        "sounds": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/sounds",
            "type": "string",
            "examples": [
                "amethyst_block",
                "amethyst_cluster",
                "ancient_debris",
                "anvil",
                "azalea",
                "azalea_leaves",
                "bamboo",
                "bamboo_sapling",
                "basalt",
                "big_dripleaf",
                "bone_block",
                "calcite",
                "candle",
                "cave_vines",
                "chain",
                "cloth",
                "comparator",
                "copper",
                "coral",
                "deepslate",
                "deepslate_bricks",
                "dirt_with_roots",
                "dripstone_block",
                "frog_spawn",
                "froglight",
                "fungus",
                "glass",
                "grass",
                "gravel",
                "hanging_roots",
                "honey_block",
                "itemframe",
                "ladder",
                "lantern",
                "large_amethyst_bud",
                "lodestone",
                "mangrove_roots",
                "medium_amethyst_bud",
                "metal",
                "moss_block",
                "moss_carpet",
                "mud",
                "mud_bricks",
                "muddy_mangrove_roots",
                "nether_brick",
                "nether_gold_ore",
                "nether_sprouts",
                "nether_wart",
                "netherite",
                "netherrack",
                "nylium",
                "packed_mud",
                "pointed_dripstone",
                "powder_snow",
                "roots",
                "sand",
                "scaffolding",
                "sculk",
                "sculk_catalyst",
                "sculk_sensor",
                "sculk_shrieker",
                "sculk_vein",
                "shroomlight",
                "slime",
                "small_amethyst_bud",
                "snow",
                "soul_sand",
                "soul_soil",
                "spore_blossom",
                "stem",
                "stone",
                "sweet_berry_bush",
                "tuff",
                "vines",
                "wood"
            ]
        },
        "itemGroup": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/itemGroup",
            "enum": [
                "itemGroup.search",
                "itemGroup.name.planks",
                "itemGroup.name.walls",
                "itemGroup.name.fence",
                "itemGroup.name.fenceGate",
                "itemGroup.name.stairs",
                "itemGroup.name.door",
                "itemGroup.name.glass",
                "itemGroup.name.glassPane",
                "itemGroup.name.permission",
                "itemGroup.name.slab",
                "itemGroup.name.stoneBrick",
                "itemGroup.name.sandstone",
                "itemGroup.name.wool",
                "itemGroup.name.woolCarpet",
                "itemGroup.name.concretePowder",
                "itemGroup.name.concrete",
                "itemGroup.name.stainedClay",
                "itemGroup.name.glazedTerracotta",
                "itemGroup.name.dye",
                "itemGroup.name.ore",
                "itemGroup.name.stone",
                "itemGroup.name.log",
                "itemGroup.name.leaves",
                "itemGroup.name.sapling",
                "itemGroup.name.seed",
                "itemGroup.name.crop",
                "itemGroup.name.grass",
                "itemGroup.name.flower",
                "itemGroup.name.rawFood",
                "itemGroup.name.cookedFood",
                "itemGroup.name.miscFood",
                "itemGroup.name.mushroom",
                "itemGroup.name.monsterStoneEgg",
                "itemGroup.name.mobEgg",
                "itemGroup.name.helmet",
                "itemGroup.name.chestplate",
                "itemGroup.name.leggings",
                "itemGroup.name.boots",
                "itemGroup.name.horseArmor",
                "itemGroup.name.sword",
                "itemGroup.name.axe",
                "itemGroup.name.pickaxe",
                "itemGroup.name.shovel",
                "itemGroup.name.hoe",
                "itemGroup.name.arrow",
                "itemGroup.name.potion",
                "itemGroup.name.splashPotion",
                "itemGroup.name.lingeringPotion",
                "itemGroup.name.bed",
                "itemGroup.name.chalkboard",
                "itemGroup.name.anvil",
                "itemGroup.name.chest",
                "itemGroup.name.shulkerBox",
                "itemGroup.name.record",
                "itemGroup.name.skull",
                "itemGroup.name.boat",
                "itemGroup.name.rail",
                "itemGroup.name.minecart",
                "itemGroup.name.pressurePlate",
                "itemGroup.name.trapdoor",
                "itemGroup.name.enchantedBook",
                "itemGroup.name.banner",
                "itemGroup.name.firework",
                "itemGroup.name.fireworkStars",
                "itemGroup.name.coral",
                "itemGroup.name.coral_decorations",
                "itemGroup.name.button",
                "itemGroup.name.sign",
                "itemGroup.name.wood",
                "itemGroup.name.banner_pattern",
                "itemGroup.name.netherWartBlock",
                "itemGroup.name.candles"
            ]
        },
        "itemTab": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/itemTab",
            "enum": [
                "commands",
                "construction",
                "equipment",
                "items",
                "nature",
                "none"
            ]
        },
        "eventTarget": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/eventTarget",
            "enum": [
                "self",
                "holder",
                "baby",
                "other",
                "player",
                "target",
                "parent",
                "block",
                "damager",
                "item"
            ]
        },
        "Decimal": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/Decimal",
            "type": "number",
            "minimum": 0.0,
            "maximum": 1.0
        },
        "itemCount": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/itemCount",
            "type": "number",
            "minimum": 0,
            "maximum": 64
        },
        "saturationModifier": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/saturationModifier",
            "anyOf": [
                {
                    "enum": [
                        "poor",
                        "low",
                        "normal",
                        "good",
                        "high",
                        "supernatural"
                    ]
                },
                {
                    "type": "number",
                    "minimum": 0.0,
                    "default": 0.6
                }
            ]
        },
        "useAnimation": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/useAnimation",
            "enum": [
                "eat",
                "drink",
                "camera"
            ]
        },
        "recipeTags": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/recipeTags",
            "type": "string",
            "examples": [
                "furnace",
                "smoker",
                "campfire",
                "soul_campfire",
                "crafting_table",
                "brewing_stand",
                "stonecutter",
                "smithing_table"
            ],
            "maxLength": 64
        },
        "itemDataCount": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/itemDataCount",
            "anyOf": [
                {
                    "type": "string",
                    "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/bedrock/item.json"
                },
                {
                    "type": "object",
                    "required": [
                        "item"
                    ],
                    "properties": {
                        "item": {
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/bedrock/item.json",
                            "description": "The items id"
                        },
                        "data": {
                            "type": "number",
                            "description": "The items data. (if any)"
                        },
                        "count": {
                            "type": "number",
                            "default": 1,
                            "maximum": 64,
                            "minimum": 1,
                            "description": "Number of these items"
                        }
                    }
                }
            ]
        },
        "itemData": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/itemData",
            "anyOf": [
                {
                    "type": "string",
                    "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/bedrock/item.json"
                },
                {
                    "type": "object",
                    "required": [
                        "item"
                    ],
                    "properties": {
                        "item": {
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/bedrock/item.json",
                            "description": "The items id"
                        },
                        "data": {
                            "type": "number",
                            "description": "The items data. (if any)"
                        }
                    }
                }
            ]
        },
        "nameSpaceID": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/nameSpaceID",
            "type": "string",
            "pattern": "^[a-zA-Z0-9._]*.:.[a-zA-Z0-9._]*$",
            "description": "Namespace id. must not contain Minecraft namespace. example; custom:stone"
        },
        "difficulty": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/difficulty",
            "type": "string",
            "enum": [
                "easy",
                "hard",
                "normal",
                "peaceful"
            ]
        },
        "biomeFiltertest": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/biomeFiltertest",
            "enum": [
                "has_biome_tag"
            ]
        },
        "operator": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/operator",
            "default": "equals",
            "enum": [
                "!=",
                "<",
                "<=",
                "<>",
                "=",
                "==",
                ">",
                ">=",
                "equals",
                "not"
            ]
        },
        "floatMolang": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/floatMolang",
            "anyOf": [
                {
                    "type": "number"
                },
                {
                    "type": "string",
                    "$ref": "#/definitions/MoLang"
                }
            ]
        },
        "MoLang": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/MoLang",
            "type": [
                "string",
                "number"
            ],
            "description": "Molang can be quite complex, or simple. It depends on your needs. More Info: https://bedrock.dev/docs/stable/MoLang",
            "examples": [
                "q.block_neighbor_has_any_tag(X,Y,Z,'TAG')",
                "q.block_property('MOD_ID:PROPERTY') == 'VALUE'",
                "q.block_property('MOD_ID:PROPERTY') ? 'true' : 'false'",
                "q.is_item_name_any('slot.weapon.mainhand','ITEM')",
                "q.max_damage * 0.25",
                "q.any_tag('TAG')",
                "geometry.texture_name"
            ]
        },
        "EventTrigger": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/EventTrigger",
            "type": "object",
            "default": {},
            "required": [
                "event"
            ],
            "properties": {
                "condition": {
                    "description": "Molang to match to run the event",
                    "$ref": "#/definitions/MoLang"
                },
                "event": {
                    "description": "The event to trigger.",
                    "type": "string"
                },
                "target": {
                    "description": "The target to execute agenst.",
                    "$ref": "#/definitions/eventTarget",
                    "default": "self"
                }
            }
        },
        "schemaArray": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/schemaArray",
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/block.json#/properties/components"
            }
        },
        "DamageSource": {
            "description": "Damage source 1.17",
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/DamageSource",
            "enum": [
                "all",
                "anvil",
                "block_explosion",
                "charging",
                "contact",
                "drowning",
                "entity_attack",
                "entity_explosion",
                "fall",
                "falling_block",
                "fire",
                "fire_tick",
                "fireworks",
                "fly_into_wall",
                "freezing",
                "lava",
                "lightning",
                "magic",
                "magma",
                "none",
                "override",
                "piston",
                "projectile",
                "stalactite",
                "stalagmite",
                "starve",
                "suffocation",
                "suicide",
                "temperature",
                "thorns",
                "void",
                "wither",
                "durability"
            ]
        },
        "Events": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/Events",
            "type": "object",
            "description": "This is the name of the event.",
            "properties": {
                "add_mob_effect": {
                    "description": "Apply mob effect to target.",
                    "type": "object",
                    "required": [
                        "amplifier",
                        "duration",
                        "effect"
                    ],
                    "default": {
                        "amplifier": 0,
                        "duration": 0,
                        "effect": "",
                        "target": "self"
                    },
                    "properties": {
                        "amplifier": {
                            "type": "integer",
                            "default": 0,
                            "description": "The amplifier for the mob effect."
                        },
                        "duration": {
                            "type": "integer",
                            "default": 0.0,
                            "description": "The duration of the mob effect. (In seconds)"
                        },
                        "effect": {
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/bedrock/mob_effect.json",
                            "description": "The mob effect to apply."
                        },
                        "target": {
                            "$ref": "#/definitions/eventTarget",
                            "default": "self",
                            "description": "The target context to execute against."
                        }
                    }
                },
                "damage": {
                    "description": "Deals damage to the target.",
                    "type": "object",
                    "required": [
                        "amount",
                        "type"
                    ],
                    "default": {
                        "amount": 0,
                        "type": "none",
                        "target": "self"
                    },
                    "properties": {
                        "amount": {
                            "type": "integer",
                            "default": 0,
                            "description": "The amount of damage to deal."
                        },
                        "type": {
                            "$ref": "#/definitions/DamageSource",
                            "description": "The type of damage to deal."
                        },
                        "target": {
                            "$ref": "#/definitions/eventTarget",
                            "default": "self",
                            "description": "The target context to execute against."
                        }
                    }
                },
                "decrement_stack": {
                    "description": "Decrement item stack.",
                    "type": "object",
                    "properties": {
                        "ignore_game_mode": {
                            "type": "boolean",
                            "default": false,
                            "description": "set to false by default. If false it will no longer decrease the item stack when playing in Creative by default."
                        }
                    }
                },
                "die": {
                    "description": "Kill target. If target is self and this is run from a block then destroy the block.",
                    "type": "object",
                    "required": [
                        "target"
                    ],
                    "default": {
                        "target": "self"
                    },
                    "properties": {
                        "target": {
                            "$ref": "#/definitions/eventTarget",
                            "default": "self",
                            "description": "The target context to execute against."
                        }
                    }
                },
                "play_effect": {
                    "description": "Spawns a particle effect relative to target position.",
                    "type": "object",
                    "required": [
                        "data",
                        "effect"
                    ],
                    "default": {
                        "data": 0,
                        "effect": "",
                        "target": "self"
                    },
                    "properties": {
                        "data": {
                            "type": "integer",
                            "default": 0,
                            "description": "Particle data value."
                        },
                        "effect": {
                            "type": "string",
                            "description": "The name of the particle effect to create."
                        },
                        "target": {
                            "$ref": "#/definitions/eventTarget",
                            "default": "self",
                            "description": "The target context to execute against."
                        }
                    }
                },
                "play_sound": {
                    "description": "Play a sound relative to target position.",
                    "type": "object",
                    "required": [
                        "sound"
                    ],
                    "default": {
                        "sound": "",
                        "target": "self"
                    },
                    "properties": {
                        "sound": {
                            "type": "string",
                            "description": "The name of the sound to play."
                        },
                        "target": {
                            "$ref": "#/definitions/eventTarget",
                            "default": "self",
                            "description": "The target context to execute against."
                        }
                    }
                },
                "remove_mob_effect": {
                    "description": "Removes mob effect from target.",
                    "type": "object",
                    "required": [
                        "effect"
                    ],
                    "default": {
                        "effect": "",
                        "target": "self"
                    },
                    "properties": {
                        "effect": {
                            "description": "The mob effect to remove. Use 'all' to remove all mob effects from target.",
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/bedrock/mob_effect.json"
                        },
                        "target": {
                            "$ref": "#/definitions/eventTarget",
                            "default": "self",
                            "description": "The target context to execute against."
                        }
                    }
                },
                "run_command": {
                    "description": "Triggers a slash command or a list of slash commands.",
                    "type": "object",
                    "required": [
                        "command"
                    ],
                    "uniqueItems": true,
                    "properties": {
                        "command": {
                            "anyOf": [
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "string"
                                }
                            ],
                            "default": "",
                            "description": "List of slash commands to run."
                        },
                        "target": {
                            "$ref": "#/definitions/eventTarget",
                            "default": "self",
                            "description": "The target context to execute against."
                        }
                    }
                },
                "set_block": {
                    "description": "Sets this block to another block type.",
                    "type": "object",
                    "required": [
                        "block_type"
                    ],
                    "default": {
                        "block_type": ""
                    },
                    "properties": {
                        "block_type": {
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/bedrock/block.json",
                            "description": "The type of block to set."
                        }
                    }
                },
                "set_block_at_pos": {
                    "description": "Sets a block relative to this block to another block type.",
                    "type": "object",
                    "required": [
                        "block_type",
                        "block_offset"
                    ],
                    "default": {
                        "block_type": "",
                        "block_offset": [
                            0.0,
                            0.0,
                            0.0
                        ]
                    },
                    "properties": {
                        "block_type": {
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/bedrock/block.json",
                            "description": "The type of block to set."
                        },
                        "block_offset": {
                            "type": "array",
                            "default": [
                                0.0,
                                0.0,
                                0.0
                            ],
                            "description": "The offset from the block's center."
                        }
                    }
                },
                "set_block_property": {
                    "description": "(Blocks Only) Sets a block property on this block.",
                    "type": "object",
                    "default": {
                        "mod_id:property": ""
                    },
                    "additionalProperties": {
                        "type": [
                            "string",
                            "integer",
                            "boolean"
                        ],
                        "description": "Block property to set on the block. Can use MoLang.",
                        "examples": [
                            "q.cardinal_facing",
                            "q.cardinal_facing_2d",
                            "q.cardinal_player_facing",
                            "q.cardinal_block_face_placed_on",
                            "PROPERTY"
                        ]
                    }
                },
                "spawn_loot": {
                    "description": "Spawn loot from block.",
                    "type": "object",
                    "required": [
                        "table"
                    ],
                    "default": {
                        "table": ""
                    },
                    "properties": {
                        "table": {
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/file_path_json",
                            "description": "File path, relative to the Behavior Pack's path, to the loot table file."
                        }
                    }
                },
                "swing": {
                    "description": "Event causes the actor to swing.",
                    "type": "object"
                },
                "teleport": {
                    "description": "Teleport target randomly around destination point.",
                    "type": "object",
                    "default": {
                        "avoid_water": true,
                        "destination": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "land_on_block": true,
                        "max_range": [
                            8.0,
                            8.0,
                            8.0
                        ],
                        "target": "self"
                    },
                    "properties": {
                        "avoid_water": {
                            "type": "boolean",
                            "default": true,
                            "description": "Determines if the teleport avoids putting the target in water."
                        },
                        "destination": {
                            "type": "array",
                            "default": [
                                0.0,
                                0.0,
                                0.0
                            ],
                            "description": "Origin destination of the teleport."
                        },
                        "land_on_block": {
                            "type": "boolean",
                            "default": true,
                            "description": "Determines if the teleport places the target on a block."
                        },
                        "max_range": {
                            "type": "array",
                            "default": [
                                8.0,
                                8.0,
                                8.0
                            ],
                            "description": "Max range the target can teleport relative to the origin destination."
                        },
                        "target": {
                            "$ref": "#/definitions/eventTarget",
                            "default": "self",
                            "description": "The target context to execute against."
                        }
                    }
                },
                "transform_item": {
                    "description": "Transforms item into another item.",
                    "type": "object",
                    "required": [
                        "transform"
                    ],
                    "default": {
                        "transform": ""
                    },
                    "properties": {
                        "transform": {
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/bedrock/item.json",
                            "description": "Name of the item it should transform into"
                        }
                    }
                },
                "shoot": {
                    "description": "Shoots a projectile.",
                    "properties": {
                        "projectile": {
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/bedrock/entity_type.json"
                        },
                        "launch_power": {
                            "type": "number"
                        },
                        "angle_offset": {
                            "type": "number"
                        }
                    }
                },
                "condition": {
                    "description": "The condition of event to be executed on the block. (Only applyable to 'sequence' event)",
                    "$ref": "#/definitions/MoLang"
                },
                "weight": {
                    "description": "The weight of event to be executed on the block. (Only applyable to 'randomize' event)",
                    "type": "integer"
                },
                "sequence": {
                    "description": "Used to sequence event functions.",
                    "type": "array",
                    "default": [
                        {}
                    ],
                    "items": {
                        "$ref": "#/definitions/Events"
                    }
                },
                "randomize": {
                    "description": "Used to randomize event functions",
                    "type": "array",
                    "default": [
                        {}
                    ],
                    "items": {
                        "$ref": "#/definitions/Events"
                    }
                },
                "trigger": {
                    "description": "Run another event.",
                    "type": "object",
                    "required": [
                        "event"
                    ],
                    "properties": {
                        "condition": {
                            "$ref": "#/definitions/MoLang",
                            "description": "The condition of event to be executed on the block."
                        },
                        "event": {
                            "type": "string",
                            "description": "The type of event executed on the block."
                        },
                        "target": {
                            "$ref": "#/definitions/eventTarget",
                            "default": "self",
                            "description": "The target of event executed on the block."
                        }
                    }
                }
            }
        },
        "_filter": {
            "title": "!!!DO NOT USE!!!",
            "description": "Use 'Filters' instead",
            "type": "object",
            "default": {},
            "required": [
                "test"
            ],
            "anyOf": [
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "actor_health"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "bool_property"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "domain"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "clock_time"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "distance_to_nearest_player"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "enum_property"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "domain",
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "float_property"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "domain",
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "has_ability"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "has_biome_tag"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "has_component"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "has_damage"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "has_equipment"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "has_property"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "has_ranged_weapon"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "hourly_clock_time"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "inactivity_timer"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "int_property"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "domain",
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_altitude"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_biome"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_block"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_brightness"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_color"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_difficulty"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_family"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_game_rule"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "domain"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_mark_variant"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_skin_id"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_temperature_type"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_temperature_value"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_variant"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_waterlogged"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "is_weather"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "light_level"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "moon_intensity"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "moon_phase"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "random_chance"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "rider_count"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "target_distance"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "weather"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "test": {
                                "const": "weather_at_position"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ]
                    }
                }
            ],
            "properties": {
                "test": {
                    "enumDescriptions": [
                        "Tests the health of an actor.",
                        "Returns true when the bool actor property matches the value provided.",
                        "Compares the current time with a float value in the range (0.0, 1.0). 0.0= Noon 0.25= Sunset 0.5= Midnight 0.75= Sunrise",
                        "Compares the distance to the nearest Player with a float value.",
                        "Returns true when the enum actor property matches the value provided.",
                        "Returns true when the float actor property matches the value provided.",
                        "Returns true when the subject entity has the named ability.",
                        "Tests whether the biome the subject is in has the specified tag.",
                        "Returns true when the subject entity contains the named component.",
                        "Returns true when the subject Player entity has opened a container.",
                        "Returns true when the subject entity receives the named damage type.",
                        "Tests for the presence of a named item in the designated slot of the subject entity.",
                        "Tests whether the Subject has the specified mob effect.",
                        "Tests if the subject has been given a custom name.",
                        "Tests for the presence of a property of the subject entity.",
                        "Returns true when the subject entity is holding a ranged weapon like a bow or crossbow.",
                        "Tests if the subject is holding an item with silk touch.",
                        "Returns true if the subject entity has the tag provided.",
                        "Returns true if the subject entity has a valid target.",
                        "Tests whether the target has any trade supply left. Will return false if the target cannot be traded with.",
                        "Compares the current 24 hour time with an int value in the range[0, 24000]",
                        "Returns true when the subject entity is inside a specified Block type.",
                        "Returns true if the subject entity is in a caravan.",
                        "Returns true when the subject entity is in the clouds.",
                        "Returns true when the subject entity in contact with any water: water, rain, splash water bottle.",
                        "Returns true when the subject entity is in lava.",
                        "Returns true when the subject entity is in Nether.",
                        "Returns true when the subject entity is in water.",
                        "Returns true when the subject entity is in water or rain.",
                        "Tests if the specified duration in seconds of inactivity for despawning has been reached.",
                        "Returns true when the int actor property matches the value provided.",
                        "Tests the current altitude against a provided value. 0= bedrock elevation.",
                        "Returns true if the subject entity is fleeing from other mobs.",
                        "Returns true when the subject entity is a baby.",
                        "Tests whether the Subject is currently in the named biome.",
                        "Returns true when the block has the given name.",
                        "Tests the current brightness against a provided value in the range (0.0f, 1.0f).",
                        "Returns true if the subject entity is climbing.",
                        "Returns true if the subject entity is the named color.",
                        "Returns true during the daylight hours.",
                        "Tests the current difficulty level of the game.",
                        "Returns true when the subject entity is a member of the named family.",
                        "Tests whether a named game rule is active.",
                        "Tests whether the Subject is in an area with humidity",
                        "Returns true if the subject entity is immobile. An entity is immobile if it lacks AI goals, has just changed dimensions or if it is a mob and has no health.",
                        "Tests whether the Subject is inside the bounds of a village.",
                        "Returns true if the subject entity is leashed.",
                        "Returns true if the subject entity leashed to the calling entity.",
                        "Returns true if the subject entity is the mark variant number provided.",
                        "Tests if the subject is not at full health.",
                        "Returns true if the subject entity is moving.",
                        "Returns true if the subject entity is the owner of the calling entity.",
                        "Tests if the subject's persistence matches the bool value passed in.",
                        "Returns true if the subject entity is riding on another entity.",
                        "Returns true if the subject entity is the skin id number provided.",
                        "Tests whether the Subject is sleeping.",
                        "Returns true if the subject entity is sneaking.",
                        "Tests whether the Subject is in an area with snow cover",
                        "Returns true if the subject entity is the target of the calling entity.",
                        "Tests whether the current temperature is a given type.",
                        "Tests the current temperature against a provided value in the range (0.0, 1.0) where 0.0f is the coldest temp and 1.0f is the hottest.",
                        "Returns true when the subject entity is underground. An entity is considered underground if there are non-solid blocks above it.",
                        "Returns true when the subject entity is under water. An entity is considered underwater if it is completely submerged in water blocks.",
                        "Returns true if the subject entity is the variant number provided.",
                        "Returns true if the subject entity is visible.",
                        "Tests if the subject block is submerged in water.",
                        "DEPRECATED",
                        "Tests is the mob is outside of the specified light level range (0, 16).",
                        "Compares the current moon intensity with a float value in the range (0.0, 1.0)",
                        "Compares the current moon phase with an integer value in the range (0, 7).",
                        "Tests if the subject is on fire.",
                        "Returns true when the subject entity is on ground.",
                        "Tests if the subject is on a hot block.",
                        "Returns true when the subject entity is on a ladder.",
                        "Returns true if the random chance rolls 0 out of a specified max range.",
                        "Returns the number of riders on this entity.",
                        "Tests if the subject is a surface mob.",
                        "Tests the distance between the calling entity and its target.",
                        "Returns true if the subject is trusted by entity.",
                        "Tests the current weather in the dimension against a provided weather value.",
                        "Tests the current weather, at the actor's position, against a provided weather value."
                    ],
                    "enum": [
                        "actor_health",
                        "bool_property",
                        "clock_time",
                        "distance_to_nearest_player",
                        "enum_property",
                        "float_property",
                        "has_ability",
                        "has_biome_tag",
                        "has_component",
                        "has_container_open",
                        "has_damage",
                        "has_equipment",
                        "has_mob_effect",
                        "has_nametag",
                        "has_property",
                        "has_ranged_weapon",
                        "has_silk_touch",
                        "has_tag",
                        "has_target",
                        "has_trade_supply",
                        "hourly_clock_time",
                        "in_block",
                        "in_caravan",
                        "in_clouds",
                        "in_contact_with_water",
                        "in_lava",
                        "in_nether",
                        "in_water",
                        "in_water_or_rain",
                        "inactivity_timer",
                        "int_property",
                        "is_altitude",
                        "is_avoiding_mobs",
                        "is_baby",
                        "is_biome",
                        "is_block",
                        "is_brightness",
                        "is_climbing",
                        "is_color",
                        "is_daytime",
                        "is_difficulty",
                        "is_family",
                        "is_game_rule",
                        "is_humid",
                        "is_immobile",
                        "is_in_village",
                        "is_leashed",
                        "is_leashed_to",
                        "is_mark_variant",
                        "is_missing_health",
                        "is_moving",
                        "is_owner",
                        "is_persistent",
                        "is_riding",
                        "is_skin_id",
                        "is_sleeping",
                        "is_sneaking",
                        "is_snow_covered",
                        "is_target",
                        "is_temperature_type",
                        "is_temperature_value",
                        "is_underground",
                        "is_underwater",
                        "is_variant",
                        "is_visible",
                        "is_waterlogged",
                        "is_weather",
                        "light_level",
                        "moon_intensity",
                        "moon_phase",
                        "on_fire",
                        "on_ground",
                        "on_hot_block",
                        "on_ladder",
                        "random_chance",
                        "rider_count",
                        "surface_mob",
                        "target_distance",
                        "trusts",
                        "weather",
                        "weather_at_position"
                    ]
                },
                "name": {
                    "type": "string"
                },
                "domain": {
                    "description": "The equipment location to test",
                    "type": "string",
                    "examples": [
                        "any",
                        "armor",
                        "feet",
                        "hand",
                        "head",
                        "inventory",
                        "leg",
                        "torso"
                    ]
                },
                "operator": {
                    "description": "The comparison to apply with 'value'.",
                    "enumDescriptions": [
                        "Test for inequality.",
                        "Test for less-than the value.",
                        "Test for less-than the value.",
                        "Test for less-than the value.",
                        "Test for equality.",
                        "Test for equality.",
                        "Test for greater-than the value.",
                        "Test for greater-than the value.",
                        "Test for equality.",
                        "Test for inequality."
                    ],
                    "enum": [
                        "!=",
                        "<",
                        "<=",
                        "<>",
                        "=",
                        "==",
                        ">",
                        ">=",
                        "equals",
                        "not"
                    ]
                },
                "subject": {
                    "description": "The subject of this filter test.",
                    "enumDescriptions": [
                        "The block involved with the interaction.",
                        "The damaging actor involved with the interaction.",
                        "The other member of an interaction, not the caller.",
                        "The caller's current parent.",
                        "The player involved with the interaction.",
                        "The entity or object calling the test",
                        "The caller's current target."
                    ],
                    "enum": [
                        "block",
                        "damager",
                        "other",
                        "parent",
                        "player",
                        "self",
                        "target"
                    ]
                },
                "value": {
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "Filters": {
            "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/bedrock/common.json#/definitions/Filters",
            "description": "Filters allow data objects to specify test criteria which allows their use.",
            "type": [
                "array",
                "object"
            ],
            "default": {},
            "items": {
                "$ref": "#/definitions/_filter"
            },
            "properties": {
                "all_of": {
                    "description": "All tests must pass in order for the group to pass.",
                    "$ref": "#/definitions/_filter"
                },
                "any_of": {
                    "description": "One or more tests must pass in order for the group to pass.",
                    "$ref": "#/definitions/_filter"
                },
                "none_of": {
                    "description": "All tests must fail in order for the group to pass.",
                    "$ref": "#/definitions/_filter"
                }
            },
            "additionalProperties": false
        }
    }
}