{
    "id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/java-edition-schema/draft-01/schema.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "description": "Data for Minecraft Java Edition addons.",
    "definitions": {
        "XZ-scheme": {
            "description": "[x, z]",
            "default": [
                1,
                2
            ],
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
                "type": "number"
            }
        },
        "XYZ-scheme": {
            "default": [
                1,
                2,
                3
            ],
            "type": "array",
            "minItems": 3,
            "maxItems": 3,
            "items": {
                "type": "number"
            }
        },
        "ModelDisplayPosition": {
            "description": "Place where an item model is displayed. Holds its rotation, translation and scale for the specified situation. fixed refers to item frames, while the rest are as their name states. Note that translations are applied to the model before rotations.",
            "properties": {
                "rotation": {
                    "description": "Specifies the rotation of the model according to the scheme [x, y, z].",
                    "$ref": "#/definitions/XYZ-scheme"
                },
                "translation": {
                    "description": "Specifies the position of the model according to the scheme [x, y, z]. If the value is greater than 80, it is displayed as 80. If the value is less than -80, it is displayed as -80.",
                    "$ref": "#/definitions/XYZ-scheme"
                },
                "scale": {
                    "description": "Specifies the scale of the model according to the scheme [x, y, z]. If the value is greater than 4, it is displayed as 4.",
                    "$ref": "#/definitions/XYZ-scheme"
                }
            }
        },
        "ModelElementFace": {
            "properties": {
                "uv": {
                    "description": "Defines the area of the texture to use according to the scheme [x1, y1, x2, y2]. If unset, it defaults to values equal to xyz position of the element. The texture behavior is inconsistent if UV extends below 0 or above 16. If the numbers of x1 and x2 are swapped (e.g. from 0, 0, 16, 16 to 16, 0, 0, 16), the texture flips. UV is optional, and if not supplied it automatically generates based on the element's position.",
                    "type": "array",
                    "default": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "minItems": 4,
                    "maxItems": 4,
                    "items": {
                        "type": "number"
                    }
                },
                "texture": {
                    "description": "Specifies the texture in form of the texture variable prepended with a #.",
                    "type": "string",
                    "pattern": "#"
                },
                "cullface": {
                    "description": "Specifies whether a face does not need to be rendered when there is a block touching it in the specified position. The position can be: down, up, north, south, west, or east. It also determines the side of the block to use the light level from for lighting the face, and if unset, defaults to the side.",
                    "enum": [
                        "north",
                        "south",
                        "west",
                        "east",
                        "up",
                        "down"
                    ]
                },
                "rotation": {
                    "description": "Rotates the texture by the specified number of degrees. Can be 0, 90, 180, or 270. Defaults to 0. Rotation does not affect which part of the texture is used. Instead, it amounts to permutation of the selected texture vertexes (selected implicitly, or explicitly though uv).",
                    "enum": [
                        0,
                        90,
                        180,
                        270
                    ],
                    "default": 0
                },
                "tintindex": {
                    "description": "Determines whether to tint the texture using a hardcoded tint index. The default is not using the tint, and any number causes it to use tint. Note that only certain blocks have a tint index; all others are unaffected.",
                    "type": "integer"
                }
            }
        }
    },
    "properties": {
        "credit": {
            "description": "Credit to the creator of this file.",
            "type": "string"
        },
        "parent": {
            "description": "Loads a different model from the given path, in form of namespaced ID. If both \"parent\" and \"elements\" are set, the \"elements\" tag overrides the \"elements\" tag from the previous model.",
            "type": "string",
            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/parent_models.json#/definitions/MinecraftBuiltInParentModels"
        },
        "ambientocclusion": {
            "default": true,
            "description": "Whether to use shading",
            "type": "boolean"
        },
        "display": {
            "description": "Holds the different places where item models are displayed.",
            "type": "object",
            "properties": {
                "thirdperson_righthand": {
                    "description": "3rd person, right hand.",
                    "$ref": "#/definitions/ModelDisplayPosition"
                },
                "thirdperson_lefthand": {
                    "description": "3rd person, left hand.",
                    "$ref": "#/definitions/ModelDisplayPosition"
                },
                "firstperson_righthand": {
                    "description": "first person, right hand.",
                    "$ref": "#/definitions/ModelDisplayPosition"
                },
                "firstperson_lefthand": {
                    "description": "first person, left hand.",
                    "$ref": "#/definitions/ModelDisplayPosition"
                },
                "gui": {
                    "description": "Icon in the inventory.",
                    "$ref": "#/definitions/ModelDisplayPosition"
                },
                "head": {
                    "description": "3rd person when the item is in the head slot.",
                    "$ref": "#/definitions/ModelDisplayPosition"
                },
                "ground": {
                    "description": "The dropped item on the ground.",
                    "$ref": "#/definitions/ModelDisplayPosition"
                },
                "fixed": {
                    "description": "The item in a item frame.",
                    "$ref": "#/definitions/ModelDisplayPosition"
                }
            }
        },
        "textures": {
            "description": "Holds the textures of the model, in form of namespaced ID or can be another texture variable.",
            "type": "object",
            "additionalProperties": {
                "description": "Defines a texture variable and assigns a texture.",
                "type": "string"
            },
            "properties": {
                "particle": {
                    "description": "What texture to load particles from. This texture is used if you are in a nether portal. Note: All breaking particles from non-model blocks are hard-coded. What texture to load particles from. Used to determine the \"crumb\" particles generated by food items, as well as to determine the barrier particle (but it always uses items/barrier.png as blockbreaking particle), which otherwise uses \"layer0\".",
                    "type": "string"
                },
                "layer0": {
                    "description": "Only used to specify the icon of the item used in the inventory. There can be more than just one layer (e.g. for spawn eggs), but the amount of possible layers is hardcoded for each item. Works only in combination with \"builtin/generated\".",
                    "type": "string"
                },
                "layer1": {
                    "description": "Only used to specify the icon of the item used in the inventory. There can be more than just one layer (e.g. for spawn eggs), but the amount of possible layers is hardcoded for each item. Works only in combination with \"builtin/generated\".",
                    "type": "string"
                }
            }
        },
        "elements": {
            "description": "Contains all the elements of the model. They can have only cubic forms. If both \"parent\" and \"elements\" are set, the \"elements\" tag overrides the \"elements\" tag from the previous model.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "from": {
                        "description": "Start point of a cube according to the scheme [x, y, z]. Values must be between -16 and 32.",
                        "type": "array",
                        "default": [
                            1,
                            2,
                            3
                        ],
                        "minItems": 3,
                        "maxItems": 3,
                        "items": {
                            "type": "number",
                            "minimum": -16,
                            "maximum": 32
                        }
                    },
                    "to": {
                        "description": "Stop point of a cube according to the scheme [x, y, z]. Values must be between -16 and 32.",
                        "type": "array",
                        "default": [
                            1,
                            2,
                            3
                        ],
                        "minItems": 3,
                        "maxItems": 3,
                        "items": {
                            "type": "number",
                            "minimum": -16,
                            "maximum": 32
                        }
                    },
                    "rotation": {
                        "description": "Defines the rotation of an element.",
                        "properties": {
                            "origin": {
                                "description": "Sets the center of the rotation according to the scheme [x, y, z].",
                                "$ref": "#/definitions/XYZ-scheme"
                            },
                            "axis": {
                                "description": "Specifies the direction of rotation, can be \"x\", \"y\" or \"z\".",
                                "enum": [
                                    "x",
                                    "y",
                                    "z"
                                ]
                            },
                            "angle": {
                                "description": "Specifies the angle of rotation. Can be 45 through -45 degrees in 22.5 degree increments.",
                                "minimum": -45,
                                "maximum": 45,
                                "type": "number",
                                "enum": [
                                    -45,
                                    -22.5,
                                    0,
                                    22.5,
                                    45
                                ]
                            },
                            "rescale": {
                                "description": "Specifies whether or not to scale the faces across the whole block. Can be true or false. Defaults to false.",
                                "default": false,
                                "type": "boolean"
                            }
                        }
                    },
                    "shade": {
                        "description": "Defines if shadows are rendered.",
                        "default": true,
                        "type": "boolean"
                    },
                    "faces": {
                        "type": "object",
                        "description": "Holds all the faces of the cube. If a face is left out, it does not render.",
                        "properties": {
                            "north": {
                                "description": "Contains the properties of the specified face.",
                                "$ref": "#/definitions/ModelElementFace"
                            },
                            "south": {
                                "description": "Contains the properties of the specified face.",
                                "$ref": "#/definitions/ModelElementFace"
                            },
                            "east": {
                                "description": "Contains the properties of the specified face.",
                                "$ref": "#/definitions/ModelElementFace"
                            },
                            "west": {
                                "description": "Contains the properties of the specified face.",
                                "$ref": "#/definitions/ModelElementFace"
                            },
                            "up": {
                                "description": "Contains the properties of the specified face.",
                                "$ref": "#/definitions/ModelElementFace"
                            },
                            "down": {
                                "description": "Contains the properties of the specified face.",
                                "$ref": "#/definitions/ModelElementFace"
                            }
                        }
                    }
                }
            }
        },
        "gui_light": {
            "description": "Can be \"front\" or \"side\". If set to \"side\", the model is rendered like a block. If set to \"front\", model is shaded like a flat item.",
            "enum": [
                "front",
                "side"
            ]
        },
        "overrides": {
            "description": "Determines cases in which a different model should be used based on item tags. All cases are evaluated in order from top to bottom and last predicate that matches overrides. However, overrides are ignored if it has been already overridden once, for example this avoids recursion on overriding to the same model.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "predicate": {
                        "description": "Holds the cases",
                        "properties": {
                            "angle": {
                                "description": "Used on compasses to determine the current angle, expressed in a decimal value of less than one.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "blocking": {
                                "description": "Used on shields to determine if currently blocking. If 1, the player is blocking.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "broken": {
                                "description": "Used on Elytra to determine if broken. If 1, the Elytra is broken.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "cast": {
                                "description": "Used on fishing rods to determine if the fishing rod has been cast. If 1, the fishing rod has been cast.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "cooldown": {
                                "description": "Used on ender pearls and chorus fruit to determine the remaining cooldown, expressed in a decimal value between 0 and 1.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "damage": {
                                "description": "Used on items with durability to determine the amount of damage, expressed in a decimal value between 0 and 1.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "damaged": {
                                "description": "Used on items with durability to determine if it is damaged. If 1, the item is damaged. Note that if an item has the unbreakable tag, this may be 0 while the item has a non-zero \"damage\" tag.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "lefthanded": {
                                "description": "Determines the model used by left handed players. It affects the item they see in inventories, along with the item players see them holding or wearing.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "pull": {
                                "description": "Determines the amount a bow or crossbow has been pulled, expressed in a decimal value of less than one.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "pulling": {
                                "description": "Used on bows and crossbows to determine if the bow is being pulled. If 1, the bow is currently being pulled.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "charged": {
                                "description": "Used on crossbows to determine if they are charged with any projectile. If 1, the crossbow is charged",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "firework": {
                                "description": "Used on crossbows. If 1, the crossbow is charged with a firework rocket.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "throwing": {
                                "description": "Used on the trident to determine if the trident is ready to be thrown by the player. If 1, the trident is ready for fire.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "time": {
                                "description": "Used on clocks to determine the current time, expressed in a decimal value of less than one.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                            },
                            "custom_model_data": {
                                "description": "Used on any item and is compared to the tag.CustomModelData NBT, expressed in an integer value. The number is still internally converted to float, causing a precision loss for some numbers above 16 million. If the value read from the item data is greater than or equal to the value used for the predicate, the predicate is positive.",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 16777216
                            }
                        }
                    },
                    "model": {
                        "description": "The path to the model to use if the case is met, in form of namespaced ID.",
                        "type": "string"
                    }
                }
            }
        }
    },
    "default": {}
}