{
    "id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/java-edition-schema/draft-01/worldgen/biome/schema.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "default": {},
    "description": "biome worldgen for Minecraft Java Edition",
    "properties": {
        "scale": {
            "description": "Used for terrain noise generation. Vertically stretches the terrain. Lower values produce flatter terrain.",
            "type": "number",
            "minimum": 0.0,
            "maximum": 1.0
        },
        "effects": {
            "description": "Ambient effects in this biome.",
            "type": "object",
            "default": {},
            "properties": {
                "mood_sound": {
                    "description": "(optional) Settings for mood sound.",
                    "type": "object",
                    "default": {},
                    "properties": {
                        "sound": {
                            "description": "Sound event to use",
                            "type": "string"
                        },
                        "tick_delay": {
                            "type": "number"
                        },
                        "block_search_extent": {
                            "description": "Determines the cubic range of possible positions to play the mood sound. The player is at the center of the cubic range, and the edge length is `2 * block_search_extent + 1`.",
                            "type": "number"
                        },
                        "offset": {
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/TAG_Double"
                        }
                    }
                },
                "sky_color": {
                    "description": "Decimal value converted from Hex color to use for the sky.",
                    "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/decimal_color"
                },
                "foliage_color": {
                    "description": "Decimal value converted from Hex color to use for tree leaves and vines. If not present, the value depends on humidity and temperature.",
                    "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/decimal_color"
                },
                "grass_color": {
                    "description": "Decimal value converted from Hex color to use for grass blocks, grass, tall grass, ferns, tall ferns, and sugar cane. If not present, the value depends on humidity and temperature.",
                    "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/decimal_color"
                },
                "fog_color": {
                    "description": "Decimal value converted from Hex color to use for fog.",
                    "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/decimal_color"
                },
                "water_color": {
                    "description": "Decimal value converted from Hex color to use for water blocks and cauldrons.",
                    "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/decimal_color"
                },
                "water_fog_color": {
                    "description": "Decimal value converted from Hex color to use for fog.",
                    "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/decimal_color"
                },
                "grass_color_modifier": {
                    "description": "Can be none, dark_forest or swamp.",
                    "enum": [
                        "none",
                        "dark_forest",
                        "swamp"
                    ]
                },
                "particle": {
                    "description": "(optional) The particle to use throughout this biome.",
                    "type": "object",
                    "default": {},
                    "properties": {
                        "probability": {
                            "description": "Controls how often the particle spawns.",
                            "type": "number"
                        },
                        "options": {
                            "description": "Controls what particle to use.",
                            "default": {},
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "The namespaced id of the particle type.",
                                    "type": "string",
                                    "example": [
                                        "block",
                                        "falling_dust",
                                        "item"
                                    ]
                                },
                                "Name": {
                                    "description": "(type=block, falling_dust) The namespaced ID of the block to use.",
                                    "type": "string"
                                },
                                "Properties": {
                                    "description": "(type=block, falling_dust) Block properties. All properties for the block need to be present.",
                                    "type": "object",
                                    "default": {}
                                },
                                "r": {
                                    "description": "(type=dust) The red component of the dust color, from 0 to 1."
                                },
                                "g": {
                                    "description": "(type=dust) The green component of the dust color, from 0 to 1."
                                },
                                "b": {
                                    "description": "(type=dust) The blue component of the dust color, from 0 to 1."
                                },
                                "scale": {
                                    "description": "(type=dust) Controls the size of the dust particles."
                                },
                                "id": {
                                    "description": "(type=item) Namespaced id of the item to use."
                                },
                                "count": {
                                    "description": "(type=item) The amount of the item."
                                },
                                "tag": {
                                    "description": "(type=item) NBT data present on the item."
                                }
                            }
                        }
                    }
                },
                "ambient_sound": {
                    "description": "(optional) Sound event to use for ambient sound.",
                    "type": "string"
                },
                "additions_sound": {
                    "description": "(optional) Settings for additions sound.",
                    "type": "object",
                    "default": {},
                    "properties": {
                        "sound": {
                            "description": "Sound event to use",
                            "type": "string"
                        },
                        "tick_chance": {
                            "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/TAG_Double"
                        }
                    }
                },
                "music": {
                    "description": "(optional) Specific music that should be played in the biome.",
                    "type": "object",
                    "default": {},
                    "properties": {
                        "sound": {
                            "description": "Sound event to use",
                            "type": "string"
                        },
                        "min_delay": {
                            "type": "number"
                        },
                        "max_delay": {
                            "type": "number"
                        },
                        "replace_current_music": {
                            "description": "Whether or not to replace music which is already playing.",
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "surface_builder": {
            "description": "The namespaced id of the configured surface builder to use.",
            "type": "string"
        },
        "carvers": {
            "description": "The carvers to use.",
            "type": "object",
            "default": {},
            "properties": {
                "air": {
                    "description": "List of carvers used during the `air` generation step.",
                    "type": "array",
                    "items": {
                        "description": "The namespaced id of a configured carver.",
                        "type": "string"
                    }
                },
                "liquid": {
                    "description": "List of carvers used during the `liquid` generation step.",
                    "type": "array",
                    "items": {
                        "description": "The namespaced id of a configured carver.",
                        "type": "string"
                    }
                }
            }
        },
        "features": {
            "description": "A list of 10 lists of features. In vanilla, each of the 10 lists corresponds to a different type of feature: the feature lists are applied to each chunk in order from top to bottom. The index of the list which the feature is placed in is also used to generate part of the feature seed, so moving features to a different list definitely has some effect on generation. Each element of each list is a namespaced id of a configured feature. Can be a empty list.",
            "type": "array",
            "items": {
                "maximumItems": 10,
                "minimumitems": 10,
                "description": "Their must be 10 arrays!",
                "type": "array",
                "items": {
                    "type": "string",
                    "examples": [
                        "RAW_GENERATION",
                        "LAKES",
                        "LOCAL_MODIFICATIONS",
                        "UNDERGROUND_STRUCTURES",
                        "SURFACE_STRUCTURES",
                        "STRONGHOLDS",
                        "UNDERGROUND_ORES",
                        "UNDERGROUND_DECORATION",
                        "VEGETAL_DECORATION",
                        "TOP_LAYER_MODIFICATION"
                    ]
                }
            }
        },
        "starts": {
            "description": "The structures to generate in this biome.",
            "type": "array",
            "items": {
                "description": "The namespaced id of a configured structure feature.",
                "type": "string"
            }
        },
        "spawners": {
            "description": "Entity spawning settings.",
            "type": "object",
            "default": {},
            "additionalProperties": {
                "description": "One of monster, creature, ambient, water_creature, water_ambient, or misc.",
                "type": "array",
                "items": {
                    "description": "The spawner data for a single mob.",
                    "type": "object",
                    "properties": {
                        "type": {
                            "description": "The namespaced entity id of the mob.",
                            "type": "string"
                        },
                        "weight": {
                            "description": "How often this mob should spawn, higher values produce more spawns.",
                            "type": "integer"
                        },
                        "minCount": {
                            "description": "The minimum count of mobs to spawn in a pack.",
                            "type": "integer"
                        },
                        "maxCount": {
                            "description": "The maximum count of mobs to spawn in a pack.",
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "creature_spawn_probability": {
            "description": "Spawns passive mobs as long as random value is less than this. Must be between 0 and 1.",
            "type": "number",
            "minimum": 0.0,
            "maximum": 1.0
        },
        "spawn_costs": {
            "description": "List of entity ids.",
            "type": "object",
            "default": {},
            "additionalProperties": {
                "type": "object",
                "properties": {
                    "energy_budget": {
                        "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/TAG_Double"
                    },
                    "charge": {
                        "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/TAG_Double"
                    }
                }
            }
        },
        "player_spawn_friendly": {
            "description": "Can be true or false.",
            "type": "boolean"
        },
        "precipitation": {
            "description": "The type of precipitation found in this biome. One of none, rain, or snow. If snow, rabbits spawning in this biome will be white or black-and-white.",
            "enum": [
                "none",
                "rain",
                "snow"
            ]
        },
        "temperature": {
            "description": "Controls gameplay features like grass and foliage color and whether snow golems take damage.",
            "type": "number"
        },
        "temperature_modifyer": {
            "temperature_modifier": "Either none or frozen.",
            "enum": [
                "none",
                "frozen"
            ]
        },
        "downfall": {
            "description": " Controls grass and foliage color, a value above 0.85 also makes fire burn out faster.",
            "type": "number",
            "minimum": 0.0,
            "maximum": 1.0
        },
        "category": {
            "description": "One of none, taiga, extreme_hills, jungle, mesa, plains, savanna, icy, the_end, beach, forest, ocean, desert, river, swamp, mushroom, or nether.",
            "enum": [
                "none",
                "taiga",
                "extreme_hills",
                "jungle",
                "mesa",
                "plains",
                "savanna",
                "icy",
                "the_end",
                "beach",
                "forest",
                "ocean",
                "desert",
                "river",
                "swamp",
                "mushroom",
                "nether",
                "underground"
            ]
        },
        "depth": {
            "description": "Used for terrain noise generation. Biomes with positive depth are considered land, biomes with negative depth are oceans.",
            "type": "number",
            "minimum": 0.0,
            "maximum": 1.0
        }
    }
}