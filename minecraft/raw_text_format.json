{
    "$id": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/raw_text_format.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "description": "Definitions for all Vanilla Minecraft RAW JSON Format (Java Edition)",
    "type": "object",
    "oneOf": [
        {"required": ["text"]},
        {"required": ["translate"]}
    ],
    "properties": {
        "text": {
            "description": "A string containing plain text to display directly. Can also be a number or boolean that is displayed directly.",
            "type": "string"
        },
        "translate": {
            "description": "A translation identifier, corresponding to the identifiers found in loaded language files. Displayed as the corresponding text in the player's selected language. If no corresponding translation can be found, the identifier itself is used as the translated text.",
            "type": "string"
        },
        "with": {
            "description": "Optional. A list of raw JSON text components to be inserted into slots in the translation text. Ignored if `translate` is not present.",
            "type": "array",
            "items": {
                "anyOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "object",
                        "$ref": "#"
                    }
                ]
            }
        },
        "extra": {
            "description": "A list of additional raw JSON text components to be displayed after this one.",
            "type": "array",
            "items": {
                "anyOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "object",
                        "$ref": "#"
                    }
                ]
            }
        },
        "color": {
            "description": "Optional. The color to render the content in. (cancels out the effects of colors used by parent objects).Set to \"#<hex>\" to insert any color in the hexadecimal color format. Example: Using \"#FF0000\" makes the component red. Must be a full 6-digit value, not 3-digit.",
            "anyOf": [
                {
                    "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/minecraft/color.json#/definitions/text"
                },
                {
                    "$ref": "https://raw.githubusercontent.com/legopitstop/JSON-Schemas/main/schemas/common_regex.json#/definitions/hex_color"
                }
            ]
        },
        "font": {
            "description": "Optional. The resource location of the font for this component in the resource pack within assets/<namespace>/font. Defaults to \"minecraft:default\".",
            "type": "string",
            "default": "minecraft:default"
        },
        "bold": {
            "description": "Optional. Whether to render the content in bold.",
            "type": "boolean",
            "default": false
        },
        "italic": {
            "description": "Optional. Whether to render the content in italics. Note that text that is italicized by default, such as custom item names, can be unitalicized by setting this to false.",
            "type": "boolean",
            "default": true
        },
        "underlined": {
            "description": "Optional. Whether to underline the content",
            "type": "boolean",
            "default": false
        },
        "strikethrough": {
            "description": "Optional. Whether to strikethrough the content.",
            "type": "boolean",
            "default": false
        },
        "obfuscated": {
            "description": "Optional. Whether to render the content obfuscated.",
            "type": "boolean",
            "default": false
        },
        "insertion": {
            "description": "Optional. When the text is shift-clicked by a player, this string is inserted in their chat input. It does not overwrite any existing text the player was writing. This only works in chat messages.",
            "type": "string"
        },
        "clickEvent": {
            "description": "Optional. Allows for events to occur when the player clicks on text. Only work in chat messages and written books, unless specified otherwise.",
            "type": "object",
            "properties": {
                "action": {
                    "description": "The action to perform when clicked.",
                    "enum": [
                        "open_url",
                        "open_file",
                        "run_command",
                        "suggest_command",
                        "change_page",
                        "copy_to_clipboard"
                    ]
                },
                "value": {
                    "description": "The URL, file path, chat, command or book page used by the specified action.",
                    "type": "string"
                }
            }
        },
        "hoverEvent": {
            "description": "Optional. Allows for a tooltip to be displayed when the player hovers their mouse over text.",
            "type": "object",
            "properties": {
                "action": {
                    "description": "The type of tooltip to show.",
                    "enum": [
                        "show_text",
                        "show_item",
                        "show_entity"
                    ]
                },
                "value": {
                    "description": "The formatting and type of this tag varies depending on the action. Deprecated, use contents instead.",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "object",
                            "$ref": "#"
                        }
                    ]
                },
                "contents": {
                    "description": "The formatting of this tag varies depending on the action.",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "object",
                            "anyOf": [
                                {
                                    "$ref": "#"
                                }
                            ],
                            "properties": {
                                "id": {
                                    "description": "action=show_item The namespaced item ID. Present `minecraft:air` if invalid. action=show_entity A string containing the UUID of the entity in the hyphenated hexadecimal format. Should be a valid UUID.",
                                    "type": "string"
                                },
                                "count": {
                                    "description": "",
                                    "type": "integer"
                                },
                                "tag": {
                                    "description": "",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Optional. Hidden if not present. A raw JSON text that is displayed as the name of the entity.",
                                    "type": "string",
                                    "$ref": "#"
                                },
                                "type": {
                                    "description": "A string containing the type of the entity. Should be a namespaced entity ID. Present minecraft:pig if invalid.",
                                    "type": "string"
                                }
                            }
                        }
                    ]
                }
            }
        },
        "score": {
            "description": "Displays a score holder's current score in an objective. Displays nothing if the given score holder or the given objective do not exist, or if the score holder is not tracked in the objective.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the score holder whose score should be displayed. This can be a selector like @p or an explicit name. If the text is a selector, the selector must be guaranteed to never select more than one entity, possibly by adding limit=1. If the text is \"*\", it shows the reader's own score (for example, /tellraw @a {\"score\":{\"name\":\"*\",\"objective\":\"obj\"}} shows every online player their own score in the \"obj\" objective)",
                    "type": "string"
                },
                "objective": {
                    "description": "The internal name of the objective to display the player's score in.",
                    "type": "string"
                },
                "value": {
                    "description": "Optional. If present, this value is displayed regardless of what the score would have been.",
                    "type": "integer"
                }
            }
        },
        "selector": {
            "description": "A string containing a selector.",
            "type": "string"
        },
        "keybind": {
            "description": "A keybind identifier, to be displayed as the name of the button that is currently bound to that action. For example, {\"keybind\": \"key.inventory\"} displays \"e\" if the player is using the default control scheme.",
            "enum": [
                "key.jump",
                "key.sneak",
                "key.sprint",
                "key.left",
                "key.right",
                "key.back",
                "key.forward",
                "key.attack",
                "key.pickitem",
                "key.use",
                "key.drop",
                "key.hotbar.1",
                "key.hotbar.2",
                "key.hotbar.3",
                "key.hotbar.4",
                "key.hotbar.5",
                "key.hotbar.6",
                "key.hotbar.7",
                "key.hotbar.8",
                "key.hotbar.9",
                "key.inventory",
                "key.swapOffhand",
                "key.loadToolActivator",
                "key.saveToolActivator",
                "key.playerlist",
                "key.chat",
                "key.command",
                "key.socialInteractions",
                "key.advancements",
                "key.spectatorOutlines",
                "key.screenshot",
                "key.smoothCamera",
                "key.fullscreen",
                "key.togglePerspective"
            ]
        },
        "block": {
            "description": "A string specifying the coordinates of the block entity from which the NBT value is obtained. The coordinates can be absolute or relative. Ignored if  nbt is not present.",
            "type": "string"
        },
        "entity": {
            "description": "A string specifying the target selector for the entity or entities from which the NBT value is obtained. Ignored if  nbt is not present.",
            "type": "string"
        },
        "storage": {
            "description": "A string specifying the namespaced ID of the command storage from which the NBT value is obtained. Ignored if  nbt is not present.",
            "type": "string"
        },
        "nbt": {
            "description": "The NBT path used for looking up NBT values from an entity, block entity, or storage. Requires one of  block,  entity, or  storage. Having more than one is allowed, but only one is used.",
            "type": "string"
        },
        "interpret": {
            "description": "Optional, defaults to false. If true, the game attempts to parse the text of each NBT value as a raw JSON text component. Ignored if  nbt is not present.",
            "type": "boolean",
            "default": false
        }
    },
    "additionalProperties": false
}